/**
 * Configuration utilities
 * Handles environment file generation and setup
 */

export interface WeaveConfig {
  projectName: string;
  framework: string;
  provider: string;
  model: string;
  apiKey: string;
  baseUrl?: string;
}

/**
 * Generate .env.local file content
 */
export function generateEnvFile(config: WeaveConfig): string {
  return `# Weave AI Configuration
# Generated by create-weave-app

# Provider Configuration
VITE_WEAVE_PROVIDER=${config.provider.toUpperCase()}
VITE_WEAVE_API_KEY=${config.apiKey}
${config.baseUrl ? `VITE_WEAVE_BASE_URL=${config.baseUrl}` : ''}

# Model Configuration
VITE_WEAVE_MODEL=${config.model}

# Optional: Enable debug mode
# VITE_WEAVE_DEBUG=true

# Optional: Set timeout (milliseconds)
# VITE_WEAVE_TIMEOUT=30000

# Optional: Enable caching
# VITE_WEAVE_CACHE=true
`;
}

/**
 * Generate .env.example file content
 */
export function generateEnvExampleFile(): string {
  return `# Weave AI Configuration
# Copy this to .env.local and fill in your values

# Provider Configuration (required)
# Options: OPENAI, ANTHROPIC, GOOGLE
VITE_WEAVE_PROVIDER=OPENAI

# API Key for your provider (required)
# OpenAI: https://platform.openai.com/api-keys
# Anthropic: https://console.anthropic.com
# Google: https://cloud.google.com
VITE_WEAVE_API_KEY=your-api-key-here

# Optional: Custom base URL for self-hosted deployments
# VITE_WEAVE_BASE_URL=https://api.example.com

# Model Configuration (required)
# OpenAI: gpt-4-turbo, gpt-4, gpt-3.5-turbo
# Anthropic: claude-3-opus, claude-3-sonnet, claude-3-haiku
# Google: gemini-pro, palm-2
VITE_WEAVE_MODEL=gpt-3.5-turbo

# Optional: Enable debug mode for development
# VITE_WEAVE_DEBUG=true

# Optional: Set request timeout in milliseconds
# VITE_WEAVE_TIMEOUT=30000

# Optional: Enable response caching
# VITE_WEAVE_CACHE=true
`;
}

/**
 * Generate tsconfig.json for the project
 */
export function generateTsConfig(): string {
  return `{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,

    /* Path mapping */
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@weaveai/*": ["node_modules/@weaveai/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
`;
}

/**
 * Generate .gitignore for the project
 */
export function generateGitignore(): string {
  return `# Environment
.env
.env.local
.env.*.local

# Dependencies
node_modules
.pnp
.pnp.js

# Build
dist
dist-ssr
*.local
build

# IDE
.vscode
.idea
*.swp
*.swo
*~
.DS_Store

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Testing
coverage
.nyc_output

# Misc
.cache
`;
}

/**
 * Generate README.md for the project
 */
export function generateReadme(config: WeaveConfig): string {
  const frameworkName = getFrameworkInfo(config.framework).name.split(' ')[0];
  return `# ${config.projectName}

A Weave AI application built with ${frameworkName}.

## Getting Started

### Prerequisites

- Node.js 18+
- ${config.provider.toUpperCase()} API key

### Installation

1. Install dependencies:
\`\`\`bash
npm install
\`\`\`

2. Configure environment variables:
   - Copy \`.env.example\` to \`.env.local\`
   - Add your \`${config.provider.toUpperCase()}\` API key
   - Set the model to use

3. Start development server:
\`\`\`bash
npm run dev
\`\`\`

## Configuration

### Environment Variables

- \`VITE_WEAVE_PROVIDER\`: AI provider (${config.provider})
- \`VITE_WEAVE_API_KEY\`: API key for your provider
- \`VITE_WEAVE_MODEL\`: Model to use (${config.model})

See \`.env.example\` for all available options.

## Building

Build for production:
\`\`\`bash
npm run build
\`\`\`

## Learn More

- [Weave Documentation](https://weave.ai/docs)
- [${config.provider.charAt(0).toUpperCase() + config.provider.slice(1)} API Docs](https://docs.${config.provider}.com)
- [Weave Examples](https://github.com/kitium-ai/weave/tree/main/examples)

## Support

For help and support, visit:
- [Weave Discord](https://discord.gg/weave)
- [GitHub Issues](https://github.com/kitium-ai/weave/issues)
`;
}

/**
 * Get framework-specific recommendations
 */
export function getFrameworkInfo(framework: string): {
  name: string;
  description: string;
  buildTool: string;
  dependencies: string[];
} {
  const frameworks: Record<
    string,
    {
      name: string;
      description: string;
      buildTool: string;
      dependencies: string[];
    }
  > = {
    'react-vite': {
      name: 'React (Vite)',
      description: 'Fast, modern React app with Vite bundler',
      buildTool: 'vite',
      dependencies: ['react', 'react-dom', '@weaveai/react'],
    },
    'react-nextjs': {
      name: 'React (Next.js)',
      description: 'Full-stack React with Next.js',
      buildTool: 'next',
      dependencies: ['next', 'react', 'react-dom', '@weaveai/react', '@weaveai/nextjs'],
    },
    vue: {
      name: 'Vue 3',
      description: 'Progressive Vue 3 app with Composition API',
      buildTool: 'vite',
      dependencies: ['vue', '@weaveai/vue'],
    },
    svelte: {
      name: 'Svelte',
      description: 'Lightweight Svelte app',
      buildTool: 'vite',
      dependencies: ['svelte', '@weaveai/svelte'],
    },
    angular: {
      name: 'Angular',
      description: 'Enterprise Angular application',
      buildTool: 'angular',
      dependencies: ['@angular/core', '@angular/common', '@weaveai/angular'],
    },
  };

  return (
    frameworks[framework.toLowerCase()] || {
      name: 'Unknown',
      description: 'Unknown framework',
      buildTool: 'unknown',
      dependencies: [],
    }
  );
}

/**
 * Get provider-specific information
 */
export function getProviderInfo(provider: string): {
  name: string;
  description: string;
  docsUrl: string;
  defaultModel: string;
} {
  const providers: Record<
    string,
    {
      name: string;
      description: string;
      docsUrl: string;
      defaultModel: string;
    }
  > = {
    openai: {
      name: 'OpenAI',
      description: 'GPT-4, GPT-3.5 models',
      docsUrl: 'https://platform.openai.com/docs',
      defaultModel: 'gpt-3.5-turbo',
    },
    anthropic: {
      name: 'Anthropic',
      description: 'Claude 3 models (Opus, Sonnet, Haiku)',
      docsUrl: 'https://docs.anthropic.com',
      defaultModel: 'claude-3-sonnet',
    },
    google: {
      name: 'Google',
      description: 'Gemini and PaLM 2 models',
      docsUrl: 'https://ai.google.dev',
      defaultModel: 'gemini-pro',
    },
  };

  return (
    providers[provider.toLowerCase()] || {
      name: 'Unknown',
      description: 'Unknown provider',
      docsUrl: '',
      defaultModel: '',
    }
  );
}

/**
 * Get recommended models for a provider
 */
export function getModelsByProvider(provider: string): string[] {
  const models: Record<string, string[]> = {
    openai: ['gpt-4-turbo', 'gpt-4', 'gpt-3.5-turbo'],
    anthropic: ['claude-3-opus', 'claude-3-sonnet', 'claude-3-haiku'],
    google: ['gemini-pro', 'palm-2'],
  };

  return models[provider.toLowerCase()] || [];
}
